<?xml version="1.0" encoding="UTF-8" ?>
<automaton>
    <description name="Linux kernel pointer analysis automaton checker"
                 desc="Handles common problems when using pointer such as
                       null/dangling pointer dereference, double free, and
                       memory leaks." />

    <start state="X" />
    <transition from="X[A]"	by="kill[A]"	to="" />
    <transition from="D[A]"	by="kill[A]"	to="" />
    <transition from="V[A]"	by="kill[A]"	to="" />
    <transition from="N[A]"	by="kill[A]"	to="" />
    <transition from="X[A]"	by="noreturn[A]"	to="R[A]" />
    <transition from="D[A]"	by="noreturn[A]"	to="R[A]" />
    <transition from="V[A]"	by="noreturn[A]"	to="R[A]" />
    <transition from="N[A]"	by="noreturn[A]"	to="R[A]" />
    <transition from="X[A]"	by="alloc[A]"	to="F[A]" />
    <transition from="D[A]"	by="alloc[A]"	to="F[A]" />
    <transition from="V[A]"	by="alloc[A]"	to="F[A]" />
    <transition from="N[A]"	by="alloc[A]"	to="F[A]" />
    <transition from="X[A]"     by="alloc[A]"    to="V[A]" />
    <transition from="X[A]"     by="alloc[A]"    to="N[A]" />
    <transition from="D[A]"     by="alloc[A]"    to="V[A]" />
    <transition from="D[A]"     by="alloc[A]"    to="N[A]" />
    <transition from="V[A]"     by="alloc[A]"    to="V[A]"/>
    <transition from="V[A]"     by="alloc[A]"    to="N[A]"/>
    <transition from="N[A]"     by="alloc[A]"    to="V[A]" />
    <transition from="N[A]"     by="alloc[A]"    to="N[A]" />
    <transition from="X[A]"     by="free[A]"      to="D[A]" />
    <transition from="V[A]"     by="free[A]"      to="D[A]" />
    <transition from="F[A]"     by="free[A]"      to="" />
    <transition from="X[A]"     by="deref[A]"     to="V[A]" />
    <transition from="X[A]"     by="isnull[A]"    to="N[A]" />
    <transition from="D[A]"     by="isnull[A]"    to=""     />
    <transition from="V[A]"     by="isnull[A]"    to=""     />
    <transition from="X[A]"     by="isnotnull[A]" to="V[A]" />
    <transition from="N[A]"     by="isnotnull[A]" to=""     />

    <error  from="N[A] -R[*]" by="deref[A]"
            desc="dereferencing NULL pointer"
            level="0"
            entry="pointer is NULL at function entry."
            begin="pointer is NULL."
            propag="not affected ==> pointer is still NULL."
            end="dereferencing NULL pointer here." />

    <error  from="D[A] -R[*]" by="deref[A]"
            desc="dereferencing dangling pointer"
            level="0"
            entry="pointer does not point to valid memory at function entry."
            begin="pointer does not point to valid memory."
            propag="not affected ==> pointer still does not point to valid memory."
            end="dereferencing dangling pointer here." />

    <error  from="D[A] -V[A]" by="free[A]"
            desc="releasing already released memory"
            level="0"
            entry=""
            begin="memory is released here -> pointer becomes dangling."
            propag="not affected ==> pointer is still dangling."
            end="pointer is dangling and releasing it here." />

    <error  from="N[A] -V[A] -X[A] -D[A]" by="isnull[A]"
            desc="unnecessary check (checking for NULL)"
            level="4"
            entry="pointer is NULL at function entry."
            begin="pointer is NULL here."
            propag="not affected ==> pointer is still NULL."
            end="pointer always points to NULL here, but checking for it." />

    <error  from="V[A] -N[A] -X[A] -D[A]" by="isnotnull[A]"
            desc="unnecessary check (checking for not NULL)"
            level="4"
            entry="pointer is not NULL at function entry."
            begin="pointer is not NULL here."
            propag="not affected ==> pointer is still not NULL."
            end="pointer always points to valid memory here, but checking for not NULL." />
    <error  from="V[*] F[*] -R[*]" by=""
            desc="memory leak - leaving function without releasing memory"
            level="2"
            entry=""
            begin="pointer points to valid memory."
            propag="not affected ==> pointer still points to valid memory."
            end="Leaving function and only reference to valid memory is lost here." />

    <pattern name="alloc">
        <assignExpression>
            <var name="A" match="id" />
            <functionCall>
                <id>malloc</id>
                <any />
            </functionCall>
        </assignExpression>
    </pattern>

    <pattern name="alloc">
        <assignExpression>
            <var name="A" match="id" />
            <castExpression>
                <ignore />
                <functionCall>
                    <id>malloc</id>
                    <ignore />
                </functionCall>
            </castExpression>
        </assignExpression>
    </pattern>

    <pattern name="alloc">
        <assignExpression>
            <var name="A" match="id" />
            <functionCall>
                <id>calloc</id>
                <any />
            </functionCall>
        </assignExpression>
    </pattern>

    <pattern name="alloc">
        <assignExpression>
            <var name="A" match="id" />
            <castExpression>
                <ignore />
                <functionCall>
                    <id>calloc</id>
                    <ignore />
                    <ignore />
                </functionCall>
            </castExpression>
        </assignExpression>
    </pattern>

    <pattern name="free" constructive="false">
        <functionCall>
            <id>free</id>
            <var name="A"/>
        </functionCall>
    </pattern>

    <pattern name="noreturn">
        <functionCall>
            <id>exit</id>
            <ignore/>
        </functionCall>
    </pattern>

    <pattern name="noreturn">
        <functionCall>
            <id>_exit</id>
            <ignore/>
        </functionCall>
    </pattern>

    <pattern name="noreturn">
        <functionCall>
            <id>_Exit</id>
            <ignore/>
        </functionCall>
    </pattern>

    <pattern name="noreturn">
        <functionCall>
            <id>err</id>
            <any/>
        </functionCall>
    </pattern>

    <pattern name="noreturn">
        <functionCall>
            <id>errx</id>
            <any/>
        </functionCall>
    </pattern>

    <pattern name="noreturn">
        <functionCall>
            <id>abort</id>
        </functionCall>
    </pattern>

    <!-- creating an alias, we won't care about the pointer anymore -->
    <pattern name="kill" constructive="false">
        <assignExpression>
            <ignore/>
            <var name="A" match="id" />
        </assignExpression>
    </pattern>
    <pattern name="kill" constructive="false">
        <assignExpression>
            <ignore/>
	    <castExpression>
		<ignore/>
		<var name="A" match="id"/>
	    </castExpression>
        </assignExpression>
    </pattern>

    <!-- return &id->member; -->
    <pattern name="kill" constructive="false">
        <returnStatement>
	    <addrExpression>
		<arrowExpression>
		    <var name="A" match="id"/>
		    <ignore/>
		</arrowExpression>
	    </addrExpression>
        </returnStatement>
    </pattern>

    <pattern name="kill" constructive="false">
        <returnStatement>
            <var name="A" match="id" />
        </returnStatement>
    </pattern>

    <pattern name="deref" constructive="false">
        <nested exclude0="sizeofExpression">
            <derefExpression>
                <var name="A" />
            </derefExpression>
        </nested>
    </pattern>

    <pattern name="deref">
	<initDeclarator>
	    <nested>
		<pointer/>
	    </nested>
	    <initializer>
		<nested exclude0="addrExpression">
		    <arrowExpression>
			<var name="A" />
			<ignore />
		    </arrowExpression>
		</nested>
	    </initializer>
	</initDeclarator>
    </pattern>

    <pattern name="deref" constructive="false">
        <nested exclude0="sizeofExpression">
            <dotExpression>
                <var name="A" />
                <ignore />
            </dotExpression>
        </nested>
    </pattern>

    <pattern name="deref" constructive="false">
        <nested exclude0="sizeofExpression">
            <arrowExpression>
                <var name="A" />
                <ignore />
            </arrowExpression>
        </nested>
    </pattern>

    <pattern name="deref" constructive="false">
        <nested exclude0="sizeofExpression">
            <arrayAccess>
                <var name="A" />
                <ignore />
            </arrayAccess>
        </nested>
    </pattern>

    <!-- BUG_ON(A) -->
    <pattern name="isnotnull" constructive="false">
	<functionCall>
	    <id>__st_BUG_ON_st__</id>
	    <prefixExpression op="!">
		<var name="A" match="{id}{arrowExpression}{arrayAccess}{dotExpression}" />
	    </prefixExpression>
	</functionCall>
    </pattern>

    <!-- BUG_ON(A) -->
    <pattern name="isnotnull" constructive="false">
	<functionCall>
	    <id>__st_assert_st__</id>
	    <var name="A" match="{id}{arrowExpression}{arrayAccess}{dotExpression}" />
	</functionCall>
    </pattern>

    <!-- assert(A) -->
    <pattern name="isnotnull" constructive="false">
        <assert>
<!--	    <nested exclude0="prefixExpression" exclude1="binaryExpression"> useless -->
	    <var name="A" match="{id}{arrowExpression}{arrayAccess}{dotExpression}" />
        </assert>
    </pattern>
    <!-- assert(!A) -->
    <pattern name="isnull" constructive="false">
        <assert>
	    <prefixExpression op="!">
		<var name="A" match="{id}{arrowExpression}{arrayAccess}{dotExpression}" />
	    </prefixExpression>
        </assert>
    </pattern>
    <!-- assert(!!A) i.e. false branch of !A test -->
    <pattern name="isnotnull" constructive="false">
        <assert>
            <prefixExpression op="!">
		<prefixExpression op="!">
		    <var name="A" match="{id}{arrowExpression}{arrayAccess}{dotExpression}" />
		</prefixExpression>
            </prefixExpression>
        </assert>
    </pattern>

    <!-- assert(A == 0) -->
    <pattern name="isnull" constructive="false">
        <assert>
	    <nested exclude0="prefixExpression">
		<binaryExpression op="==">
		    <var name="A" />
		    <intConst>0</intConst>
		</binaryExpression>
	    </nested>
        </assert>
    </pattern>
    <!-- assert(!(A == 0)) -->
    <pattern name="isnotnull" constructive="false">
        <assert>
            <prefixExpression op="!">
		<nested exclude0="prefixExpression">
		    <binaryExpression op="==">
			<var name="A" />
			<intConst>0</intConst>
		    </binaryExpression>
		</nested>
            </prefixExpression>
        </assert>
    </pattern>

    <!-- assert(A == (T*)0) -->
    <pattern name="isnull" constructive="false">
        <assert>
	    <binaryExpression op="==">
		<var name="A" />
		<castExpression>
		    <ignore />
		    <intConst>0</intConst>
		</castExpression>
	    </binaryExpression>
        </assert>
    </pattern>
    <!-- assert(!(A == (T*)0)) -->
    <pattern name="isnotnull" constructive="false">
        <assert>
            <prefixExpression op="!">
		<binaryExpression op="==">
		    <var name="A" />
		    <castExpression>
			<ignore />
			<intConst>0</intConst>
		    </castExpression>
		</binaryExpression>
            </prefixExpression>
        </assert>
    </pattern>

    <!-- assert(A != (T*)0) -->
    <pattern name="isnotnull" constructive="false">
        <assert>
	    <binaryExpression op="!=">
		<var name="A" />
		<castExpression>
		    <ignore />
		    <intConst>0</intConst>
		</castExpression>
	    </binaryExpression>
        </assert>
    </pattern>
    <!-- assert(!(A != (T*)0)) -->
    <pattern name="isnull" constructive="false">
        <assert>
            <prefixExpression op="!">
		<binaryExpression op="!=">
		    <var name="A" />
		    <castExpression>
			<ignore />
			<intConst>0</intConst>
		    </castExpression>
		</binaryExpression>
            </prefixExpression>
        </assert>
    </pattern>

    <!-- assert((T*)0 == A) -->
    <pattern name="isnull" constructive="false">
        <assert>
	    <binaryExpression op="==">
		<castExpression>
		    <ignore />
		    <intConst>0</intConst>
		</castExpression>
		<var name="A" />
	    </binaryExpression>
        </assert>
    </pattern>
    <!-- assert(!((T*)0 == A)) -->
    <pattern name="isnotnull" constructive="false">
        <assert>
            <prefixExpression op="!">
		<binaryExpression op="==">
		    <castExpression>
			<ignore />
			<intConst>0</intConst>
		    </castExpression>
		    <var name="A" />
		</binaryExpression>
            </prefixExpression>
        </assert>
    </pattern>

</automaton>

