#!/usr/bin/perl -w
# took over from cgcc from sparse package
use strict;
use File::Basename;

my $cc = $ENV{'REAL_CC'} || 'cc';
my $check = $cc . ' -E -w ';
# until we get things fixed...
$check .= '-P -D__attribute__\(x\)= -D__builtin_va_list=int -D__builtin_offsetof\(x,y\)=1 ';
my $output = '';

$ENV{'CHECKER_DEF'} || die "You need to define checking xml in CHECKER_DEF " .
	"environment variable";
my $checker_def = $ENV{'CHECKER_DEF'};
die "Checking xml ($checker_def) doesn't exist" unless -f $checker_def;

my $stansedir = ".stanse/";
my $stansejar = $ENV{'STANSE_JAR'} || "stanse.jar";

my $gendeps = 0;
my $do_check = 0;
my $do_compile = 1;
my $verbose = 0;
my $change_suffix = 0;

foreach (@ARGV) {
    # Look for a .c file.  We don't want to run the checker on .o or .so files
    # in the link run.  (This simplistic check knows nothing about options
    # with arguments, but it seems to do the job.)
    $do_check = 1 if /^[^-].*\.c$/;

    # Ditto for stdin.
    $do_check = 1 if $_ eq '-';

    $gendeps = 1 if /^-M$/;

    if ($_ eq '-no-compile') {
	$do_compile = 0;
	next;
    }

    $verbose = 1 if $_ eq '-v';

    my $this_arg = ' ' . &quote_arg ($_);
    $cc .= $this_arg unless &check_only_option ($_);

    # convert -o /path/file.o into -o /path/.stanse/file.o
    if ($change_suffix == 1) {
	$output = $stansedir . &quote_arg($_);
	my $dir = dirname($output);
	if (! -d $dir) {
		system("mkdir -p $dir 2>/dev/null") && die "Can't create $dir";
	}
	$this_arg = ' ' . $output;
#	$output = substr(`pwd`, 0, -1) . '/' . $output;
	$change_suffix = 0;
    }
    $change_suffix = 1 if $_ eq '-o';

    $check .= $this_arg unless &cc_only_option ($_);
}
#print STDERR "X$cc\n";
#print STDERR "Y$check\n";

if ($gendeps) {
    $do_compile = 1;
    $do_check = 0;
}

if ($do_check) {
    print "$check\n" if $verbose;
    $check = $check . "; java -jar $stansejar -nogui -ch $checker_def $output";
    if ($do_compile) {
	system ($check);
    } else {
	exec ($check);
    }
}

if ($do_compile) {
    exec ($cc);
}

exit 0;

# -----------------------------------------------------------------------------
# Check if an option is for "check" only.

sub check_only_option {
    my ($arg) = @_;
    return 0;
}

# -----------------------------------------------------------------------------
# Check if an option is for "cc" only.

sub cc_only_option {
    my ($arg) = @_;
    # -Wall turns on all Sparse warnings, including experimental and noisy
    # ones.  Don't include it just because a project wants to pass -Wall to cc.
    # If you really want cgcc to run sparse with -Wall, use
    # CHECK="sparse -Wall".
    return 1 if $arg =~ /^-Wall$/;
    return 0;
}

# -----------------------------------------------------------------------------
# Simple arg-quoting function.  Just adds backslashes when needed.

sub quote_arg {
    my ($arg) = @_;
    return "''" if $arg eq '';
    return join ('',
		 map {
		     m|^[-a-zA-Z0-9._/,=]+$| ? $_ : "\\" . $_;
		 } (split (//, $arg)));
}

